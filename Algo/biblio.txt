#include "biblio.h"
#include "tools.h"


procedure AfficheLivres(; biblio : t_biblio)
Debut
    avec i : entier

    pour i de 1 a biblio.nblivre pas de 1 faire
        Afficher AffMesg(01, biblio), i, " :", a la ligne
        AfficheLivre(biblio, i)
        A la ligne
	finfaire
Fin

procedure AfficheLivre(; t_biblio : biblio, entier : nolivre)
Debut
    avec livre[MAX_LIVRE] : t_livre

    livre[nolivre] <- biblio.tablivre[nolivre]
    Afficher MesgSaisie(02, biblio), livre[nolivre].titre, a la ligne
    Afficher MesgSaisie(03, biblio), biblio.tabauteur[livre[nolivre].auteur].prenom, " ", biblio.tabauteur[livre[nolivre].auteur].nom, a la ligne
    Afficher MesgSaisie(04, biblio), DateToString('/', livre[nolivre].date.jour, livre[nolivre].date.mois, livre[nolivre].date.annee), a la ligne
    Afficher MesgSaisie(05, biblio), livre[nolivre].page, a la ligne
Fin

fonction RechercheLivre(; biblio : t_biblio) retourne entier
Debut
    choix, nolivre : entier
    recherche : chaine

    nolivre <- -1
    faire
        Menu(AffMenu(1001, biblio), choix, biblio)
        selon choix faire
			cas 1 : nolivre <- AfficheLivreRecherche(biblio, 1)
			cas 2 : nolivre <- AfficheLivreRecherche(biblio, 2)
			cas 3 :	nolivre <- AfficheLivreRecherche(biblio, 3)
			cas 4 : nolivre <- AfficheLivreRecherche(biblio, 4)
			cas 5 : rien
			defaut:
				si (Controle('|', choix, 1, 5)) alors
					MesgError(0002, biblio)
				sinon
					MesgError(0001, biblio)
				finsi
        finfaire
    tant que (Controle('|', choix, 1, 5))
    retourne nolivre
Fin

fonction AfficheLivreRecherche(type : entier ; biblio : t_biblio) retourne entier
Debut
    i, j, liste[MAX], choix : entier
    recherche : chaine
    reponse : caractere
    date : t_date

    j <- 0
    selon type faire
		cas 1 :
			SaisieChaine(recherche, MesgSaisie(0006, biblio))
			pour i de 0 a biblio.nblivre faire
				si(RechercheExp(Majuscule(biblio.tablivre[i].titre), Majuscule(recherche))) alors
					j <- j + 1
					liste[j] <- i
				finsi
			finfaire
		cas 2 :
			recherche <- to_string(AfficheAuteurRecherche(biblio, 8))
			pour i de 0 a biblio.nblivre faire
				si(recherche = to_string(biblio.tablivre[i].auteur)) alors
					j <- j + 1
					liste[j] <- i
				finsi
			finfaire
		cas 3:
			SaisieChaine(recherche, MesgSaisie(0007, biblio))
			pour i de 0 a biblio.nblivre faire
				si(recherche = to_string(biblio.tablivre[i].page)) alors
					j <- j + 1
					liste[j] <- i
				finsi
			finfaire
		cas 4:
			Afficher MesgSaisie(8, biblio), a la ligne
			SaisirDate(date, biblio)
			recherche <- DateToString('-', date.jour, date.mois, date.annee)
			pour i de 0 a biblio.nblivre faire
				si(recherche = DateToString('-', biblio.tablivre[i].date.jour, biblio.tablivre[i].date.mois, biblio.tablivre[i].date.annee)) alors
					j <- j + 1
					liste[j] <- i
				finsi
			finfaire
		defaut : rien
    finfaire
    si(j = 0) alors
        MesgError(1003, biblio)
        choix <- 0
	sinon
        si(j = 1) alors
            Afficher MesgSaisie(9, biblio), a la ligne
            AfficheLivre(biblio, liste[1])
            choix <- liste[1]
        sinon
            pour i de 1 a j faire
                Afficher MesgSaisie(0010, biblio), i, " :", a la ligne
                AfficheLivre(biblio, liste[i])
            finfaire
            SaisieEntier(choix, MesgSaisie(0011, biblio))
            tant que(Controle('&', choix, 0, j + 1) = faux) faire
                MesgError(0005, biblio)
                SaisieEntier(choix, MesgSaisie(0012, biblio))
            finfaire
            AfficheLivre(biblio, liste[choix])
            faire
                SaisieCarac(reponse, MesgSaisie(0013, biblio))
                si(reponse = AffChoix(1, biblio)) alors
                    choix <- liste[choix]
                sinon
                    si(reponse = AffChoix(2, biblio)) alors
                        SaisieEntier(choix, MesgSaisie(0011, biblio))
                        tant que(Controle('&', choix, 0, j) = faux) faire
                            MesgError(0005, biblio)
                            SaisieEntier(choix, MesgSaisie(0012, biblio))
                        finfaire
                        AfficheLivre(biblio, choix)
                        choix <- liste[choix]
                    sinon
                        MesgError(0002, biblio)
                    finsi
                finsi
            tant que (reponse != AffChoix(1, biblio) et reponse != AffChoix(2, biblio))
        finsi
    finsi
	retourne choix
Fin

procedure AfficheAuteurs(; biblio : t_biblio)
Debut
    i : entier

    pour i de 1 a biblio.nbauteur faire
        Afficher AffMesg(15, biblio), i, " :", a la ligne
        AfficheAuteur(biblio, i)
        A la ligne
    finfaire
Fin

procedure AfficheAuteur(; biblio : t_biblio, noauteur : entier)
Debut
    avec auteur : t_auteur

    auteur <- biblio.tabauteur[noauteur]
    Afficher MesgSaisie(16, biblio), auteur.nom, a la ligne
    Afficher MesgSaisie(17, biblio), auteur.prenom, a la ligne
    Afficher MesgSaisie(18, biblio), auteur.nationalite, a la ligne
    Afficher MesgSaisie(19, biblio), DateToString('-', auteur.nais.jour, auteur.nais.mois, auteur.nais.annee), a la ligne
    si (auteur.mort.jour != 0) alors
        Afficher MesgSaisie(20, biblio).c_str(), DateToString('-', auteur.mort.jour, auteur.mort.mois, auteur.mort.annee), a la ligne
    finsi
    Afficher MesgSaisie(21, biblio).c_str(), auteur.nblivres, a la ligne
Fin

fonction RechercheAuteur(; biblio : t_biblio) retourne entier
Debut
    avec choix, noauteur : entier
         recherche 		 : chaine

    noauteur <- -1
    faire
        Menu(AffMenu(1002, biblio), choix, biblio)
        selon choix faire
        cas 1: noauteur <- AfficheAuteurRecherche(biblio, 1)
        cas 2: noauteur <- AfficheAuteurRecherche(biblio, 2)
        cas 3: noauteur <- AfficheAuteurRecherche(biblio, 3)
        cas 4: noauteur <- AfficheAuteurRecherche(biblio, 4)
        cas 5: noauteur <- AfficheAuteurRecherche(biblio, 5)
        cas 6: noauteur <- AfficheAuteurRecherche(biblio, 6)
        cas 7: noauteur <- AfficheAuteurRecherche(biblio, 7)
        cas 8: rien
        defaut:
            si (Controle('|', choix, 1, 8)) alors
                MesgError(0002, biblio)
            sinon
                MesgError(0001, biblio)
            finsi
        finfaire
    tant que (Controle('|', choix, 1, 8))
    retourne noauteur
Fin

finction AfficheAuteurRecherche(type : entier ; biblio : t_biblio) retourne entier
Debut
    avec 	recherche, recherche1, recherche2 : chaine
    		i, j, liste[MAX], choix : entier
    		reponse : caractere
    		date : t_date

    j <- 0
    selon type faire
    cas 1:
        SaisieChaine(recherche, MesgSaisie(22, biblio))
        pour i de 0 a biblio.nbauteur-1 faire
            si (RechercheExp(Majuscule(biblio.tabauteur[i].nom), Majuscule(recherche))) alors
                j = j + 1
                liste[j] <- i
            finsi
        finfaire
    cas 2:
        SaisieChaine(recherche, MesgSaisie(23, biblio))
        pour i de 0 a biblio.nbauteur-1 faire
            si (RechercheExp(Majuscule(biblio.tabauteur[i].prenom), Majuscule(recherche))) alors
                j = j + 1
                liste[j] <- i
            finsi
        finfaire
    cas 3:
        SaisieChaine(recherche, MesgSaisie(24, biblio))
        pour i de 0 a biblio.nbauteur-1 faire
            si (RechercheExp(Majuscule(biblio.tabauteur[i].nationalite), Majuscule(recherche))) alors
                j = j + 1
                liste[j] <- i
            finsi
        finfaire
    cas 4:
        SaisieChaine(recherche, MesgSaisie(25, biblio))
        pour i de 0 a biblio.nbauteur-1 faire
            si (recherche = to_string(biblio.tabauteur[i].nblivres)) alors
                j = j + 1
                liste[j] <- i
            finsi
        finfaire
    cas 5:
        Afficher MesgSaisie(26, biblio), a la ligne
        SaisirDate(date, biblio)
        recherche <- DateToString('-', date.jour, date.mois, date.annee)
        pour i de 0 a biblio.nbauteur-1 faire
            si (recherche = DateToString('-', biblio.tabauteur[i].nais.jour, biblio.tabauteur[i].nais.mois, biblio.tabauteur[i].nais.annee)) alors
                j = j + 1
                liste[j] <- i
            finsi
        finfaire
    cas 6:
        Afficher MesgSaisie(26, biblio), a la ligne
        SaisirDate(date, biblio)
        recherche <- DateToString('-', date.jour, date.mois, date.annee)
        pour i de 0 a biblio.nbauteur-1 faire
            si (recherche = DateToString('-', biblio.tabauteur[i].mort.jour, biblio.tabauteur[i].mort.mois, biblio.tabauteur[i].mort.annee)) alors
                j = j + 1
                liste[j] <- i
            finsi
        finfaire
    cas 7:
        SaisieChaine(recherche, MesgSaisie(28, biblio))
        pour i de 0 a biblio.id-1 faire
            si (recherche = to_string(biblio.tabauteur[i].id_auteur)) alors
                j = j + 1
                liste[j] <- i
            finsi
        finfaire
    cas 8:
        SaisieChaine(recherche1, MesgSaisie(23, biblio))
        SaisieChaine(recherche2, MesgSaisie(22, biblio))
        pour i de 0 a biblio.id-1 faire
            si (RechercheExp(Majuscule(biblio.tabauteur[i].nom), Majuscule(recherche2)) 
            	et RechercheExp(Majuscule(biblio.tabauteur[i].prenom), Majuscule(recherche1))) alors
                j = j + 1
                liste[j] <- i
            finsi
        finfaire
    defaut:
        si (Controle('|', choix, 1, 8)) alors
            MesgError(0002, biblio)
        sinon
            MesgError(0001, biblio)
        finsi
    finfaire
    si (j = 0) alors
        MesgError(1004, biblio)
        choix <- 0
    sinon
        si (j = 1) alors
            Afficher MesgSaisie(9, biblio), a la ligne
            AfficheAuteur(biblio, liste[1])
            choix <- liste[1]
        sinon
            pour i de 1 a j faire
                Afficher AffMesg(10, biblio), i, " :", a la ligne
                AfficheAuteur(biblio, liste[i])
            finfaire
            SaisieEntier(choix, MesgSaisie(11, biblio))
            tant que (Controle('&', choix, 0, j + 1) = faux) faire
                MesgError(0005, biblio)
                SaisieEntier(choix, MesgSaisie(12, biblio))
            finfaire
            AfficheAuteur(biblio, liste[choix])
            faire
                SaisieCarac(reponse, MesgSaisie(30, biblio))
                si (reponse = AffChoix(1, biblio)) alors
                    choix <- liste[choix]
                sinon
                    si (reponse = AffChoix(2, biblio)) alors
                        SaisieEntier(choix, MesgSaisie(11, biblio))
                        tant que(Controle('&', choix, 0, j + 1) = faux) faire
                            MesgError(0005, biblio)
                            SaisieEntier(choix, MesgSaisie(12, biblio))
                        finfaire
                        AfficheAuteur(biblio, choix)
                        choix <- liste[choix]
                    sinon
                        si (reponse = AffChoix(3, biblio)) alors
                            choix <- -1
                        sinon
                            MesgError(0002, biblio)
                        finsi
                    finsi
                finsi
            tant que (reponse != AffChoix(1, biblio) et reponse != AffChoix(2, biblio) et reponse != AffChoix(3, biblio))
        finsi
    finsi
    retourne choix
Fin

procedure AjoutLivre(; biblio : t_biblio)
Debut
    avec 	livre : t_livre
    		reponse : caractere
    		i : entier

    si  (biblio.nblivre = MAX_LIVRE-1) alors
        MesgError(2001, biblio)
    sinon
        SaisieChaine(livre.titre, MesgSaisie(2, biblio))
        tant que (livre.titre = "") faire
            MesgError(0005, biblio)
            SaisieChaine(livre.titre, MesgSaisie(34, biblio))
        finfaire
        i <- AfficheAuteurRecherche(biblio, 8)
        si (i = 0) alors
            Afficher MesgSaisie(35, biblio), a la ligne
            AjoutAuteur(biblio)
            livre.auteur <- biblio.id
        sinon
            SaisieCarac(reponse, MesgSaisie(36, biblio))
            si (reponse = AffChoix(1, biblio)) alors
                AjoutAuteur(biblio)
                livre.auteur <- biblio.id
            sinon
                si (reponse = AffChoix(2, biblio)) alors
                    livre.auteur <- i
                sinon
                    MesgError(0002, biblio)
                finsi
            finsi
        finsi
        si  (LivreExisteDeja(biblio, livre.titre, livre.auteur)) alors
            MesgError(1007, biblio)
        sinon
            Afficher MesgSaisie(4, biblio), a la ligne
            SaisirDate(livre.date, biblio)
            tant que (ControleDate(biblio.tabauteur[biblio.nbauteur].nais.jour, biblio.tabauteur[biblio.nbauteur].nais.mois,
                biblio.tabauteur[biblio.nbauteur].nais.annee, livre.date.jour, livre.date.mois, livre.date.annee) = faux) faire
                MesgError(0003, biblio)
                SaisirDate(livre.date, biblio)
            finfaire
            SaisieEntier(livre.page, MesgSaisie(5, biblio))
            tant que (Controle('>', livre.page, 0, -1) = faux) faire
                MesgError(0006, biblio)
                SaisieEntier(livre.page, MesgSaisie(7,biblio))
            finfaire
            biblio.tablivre[biblio.nblivre + 1] <- livre
            biblio.nblivre <- biblio.nblivre + 1
            biblio.tabauteur[biblio.tablivre[biblio.nblivre].auteur].nblivres <- biblio.tabauteur[biblio.tablivre[biblio.nblivre].auteur].nblivres + 1
            Afficher MesgSaisie(37, biblio), a la ligne
        finsi
    finsi
Fin

fonction LivreExisteDeja(titre : chaine, auteur : entier ; biblio : t_biblio) retourne booleen
Debut
    avec 	buffer_string : chaine
    	 	existe : booleen
    	 	i, j : entier

    existe <- faux
    pour i de 0 a biblio.nblivre-1 faire
        pour j de 0 a biblio.nbauteur-1 faire
            si (Majuscule(biblio.tablivre[i].titre) = Majuscule(titre) et biblio.tabauteur[j].id_auteur = auteur) alors
                existe <- vrai
            finsi
        finfaire
    finfaire
    retourne existe
Fin

procedure ModifLivre(; biblio : t_biblio, nolivre : entier) 
Debut
    avec 	choix, auteur : entier
    		buffer_string : chaine
            t_date : date
    		reponse : caractere

    si (nolivre > 0) alors
        faire
            Menu(AffMenu(1003, biblio), choix, biblio)
            selon (choix) faire
            cas 1:
                SaisieChaine(buffer_string, MesgSaisie(38, biblio))
                si (LivreExisteDeja(biblio, buffer_string, biblio.tablivre[nolivre].auteur)) alors
                    MesgError(1007, biblio)
                    Afficher AffMesg(39, biblio), a la ligne
                sinon
                    biblio.tablivre[nolivre].titre <- buffer_string
                    Afficher AffMesg(40, biblio), a la ligne
                finsi
            cas 2:
                Afficher AffMesg(42, biblio), biblio.tablivre[nolivre].titre, " :", a la ligne
                auteur <- AfficheAuteurRecherche(biblio, 8)
                si (auteur = 0) alors
                    Afficher MesgSaisie(35, biblio), a la ligne
                    AjoutAuteur(biblio)
                    auteur <- biblio.id
                sinon
                    faire
                        SaisieCarac(reponse, MesgSaisie(36, biblio))
                        si (reponse = AffChoix(1, biblio)) alors
                            AjoutAuteur(biblio)
                            auteur <- biblio.id
                        sinon
                            si (reponse = AffChoix(2, biblio)) alors
                            sinon
                                MesgError(0003, biblio)
                            finsi
                        finsi
                    tant que(reponse != AffChoix(1, biblio) et reponse != AffChoix(2, biblio))
                finsi
                si (LivreExisteDeja(biblio, biblio.tablivre[nolivre].titre, auteur)) alors
                    MesgError(1007, biblio)
                    Afficher AffMesg(39, biblio), a la ligne
                sinon
                    biblio.tablivre[nolivre].auteur <- auteur
                    Afficher AffMesg(40, biblio), a la ligne
                finsi
            cas 3:
                Afficher MesgSaisie(43, biblio), a la ligne
                SaisirDate(date, biblio)
                si (ControleDate(biblio.tabauteur[biblio.tablivre[nolivre].auteur].nais.jour, 
                    biblio.tabauteur[biblio.tablivre[nolivre].auteur].nais.mois, 
                    biblio.tabauteur[biblio.tablivre[nolivre].auteur].nais.annee, 
                    date.jour, date.annee, date.annee) = faux) alors
                    MesgError(0003, biblio)
                    MesgNonValid(39, biblio)
                sinon
                    biblio.tablivre[nolivre].date <- date
                    MesgValid(40, biblio)
                finsi
            cas 4:
                SaisieEntier(buffer_int, MesgSaisie(44, biblio))
                si (Controle('>', biblio.tablivre[nolivre].page, 0, -1) = faux) alors
                    MesgError(0006, biblio)
                    MesgNonValid(39, biblio)
                sinon
                    biblio.tablivre[nolivre].page <- buffer_int
                    MesgValid(40, biblio)
                finsi
            cas 5: rien
            defaut:
                si (Controle('|', choix, 1, 5)) alors
                    MesgError(0002, biblio)
                sinon
                    MesgError(0001, biblio)
                finsi
            finfaire
        tant que(choix != 5)
    finsi
Fin

procedure SupprimeLivre(; biblio : t_biblio)
Debut
    avec 	reponse : caractere
    		position : entier

    position <- RechercheLivre(biblio)
    si (position <= 0) alors
        si  (position = 0) alors
            MesgError(1005, biblio)
        finsi
    sinon
        AfficheLivre(biblio, position)
        faire
            SaisieCarac(reponse, MesgSaisie(45, biblio))
            si (reponse = AffChoix(1, biblio)) alors
                si (biblio.tabauteur[biblio.tablivre[position].auteur].nblivres = 0) alors
                    faire    
                        SaisieCarac(reponse, MesgSaisie(46, biblio))
                        si (reponse = AffChoix(1, biblio)) alors
                            biblio.tabauteur[biblio.tablivre[position].auteur] <- biblio.tabauteur[biblio.nbauteur]
                            biblio.nbauteur <_ biblio.nbauteur - 1
                            MesgValid(47, biblio)
                        sinon
                            si (reponse = AffChoix(2, biblio)) alors
                            sinon
                                MesgError(0002, biblio)
                            finsi
                        finsi
                    tant que(reponse != AffChoix(1, biblio) et reponse != AffChoix(2, biblio))
                    biblio.tablivre[position] <- biblio.tablivre[biblio.nblivre]
                    biblio.nblivre <- biblio.nblivre - 1
                    Afficher AffMesg(47, biblio), a la ligne
                sinon
                    biblio.tablivre[position] <- biblio.tablivre[biblio.nblivre]
                    biblio.nblivre <- biblio.nblivre - 1
                    MesgValid(47, biblio)
                finsi
            sinon
                si (reponse = AffChoix(2, biblio)) alors
                    Afficher AffMesg(48, biblio), a la ligne
                sinon
                    MesgError(0002, biblio)
                finsi
            finsi
        tant que (reponse != AffChoix(1, biblio) et reponse != AffChoix(2, biblio))
    finsi
Fin

procedure AjoutAuteur(; biblio : t_biblio)
Debut
    avec 	buffer_string : chaine
    		auteur : t_auteur
    		reponse : caractere

    si (biblio.nbauteur = MAX_AUTEUR - 1) alors
        MesgError(2002, biblio)
    sinon
        SaisieChaine(auteur.nom, MesgSaisie(16, biblio))
        tant que (auteur.nom = "") faire
            MesgError(0005, biblio)
            SaisieChaine(auteur.nom, MesgSaisie(49, biblio))
        finfaire
        SaisieChaine(auteur.prenom, MesgSaisie(17, biblio))
        tant que (auteur.prenom = "") faire
            MesgError(0005, biblio)
            SaisieChaine(auteur.prenom, MesgSaisie(50, biblio))
        finfaire
        SaisieChaine(auteur.nationalite, MesgSaisie(18, biblio))
        tant que (auteur.nationalite = "") faire
            MesgError(0005, biblio)
            SaisieChaine(auteur.nationalite, MesgSaisie(51, biblio))
        finfaire
        Afficher MesgSaisie(26, biblio), a la ligne
        SaisirDate(auteur.nais, biblio)
        faire
            SaisieCarac(reponse, MesgSaisie(52, biblio))
            si (reponse = AffChoix(1, biblio)) alors
                Afficher MesgSaisie(14, biblio), a la ligne
                SaisirDate(auteur.mort, biblio)
                tant que (ControleDate(auteur.nais.jour, auteur.nais.mois, auteur.nais.annee, auteur.mort.jour, auteur.mort.mois, auteur.mort.annee) = faux) faire
                    MesgError(0003, biblio)
                    Afficher MesgSaisie(14, biblio), a la ligne
                    SaisirDate(auteur.mort, biblio)
                finfaire
            sinon
                si (reponse = AffChoix(2, biblio)) alors
                    auteur.mort.jour <- 0
                    auteur.mort.mois <- 0
                    auteur.mort.annee <- 0
                sinon
                    MesgError(0002, biblio)
                finsi
            finsi
        tant que (reponse != AffChoix(1, biblio) et reponse != AffChoix(2, biblio))
        auteur.nblivres <- 0
        auteur.id_auteur <- biblio.id + 1
        biblio.id <- biblio.id + 1
        Afficher AffMesg(53, biblio), a la ligne, MesgSaisie(54, biblio), auteur.id_auteur, a la ligne
        biblio.tabauteur[biblio.nbauteur + 1] <- auteur
        biblio.nbauteur <- biblio.nbauteur + 1
    finsi
Fin

procedure ModifAuteur(; biblio : t_biblio, noauteur : entier)
Debut
    avec 	choix, i : entier
    		date_ok : booleen
            t_date : date
    		buffer_string : chaine

    si (noauteur > 0) alors
        faire
            Menu(AffMenu(1004, biblio), choix, biblio)
            selon (choix) faire
            cas 1:
                SaisieChaine(buffer_string, MesgSaisie(55, biblio))
                biblio.tabauteur[noauteur].nom <- buffer_string
                Afficher MesgSaisie(40, biblio), a la ligne
            cas 2:
                SaisieChaine(buffer_string, MesgSaisie(56, biblio))
                biblio.tabauteur[noauteur].prenom <- buffer_string
                Afficher MesgSaisie(40, biblio), a la ligne
            cas 3:
                SaisieChaine(buffer_string, MesgSaisie(57, biblio))
                biblio.tabauteur[noauteur].nationalite <- buffer_string
                Afficher MesgSaisie(40, biblio), a la ligne
            cas 4:
                Afficher MesgSaisie(58, biblio), a la ligne
                SaisirDate(date, biblio)
                date_ok <- vrai
                pour i de 0 a biblio.nblivre - 1 faire
                    si (biblio.tablivre[i].auteur = biblio.tabauteur[noauteur].id_auteur) alors
                        si (ControleDate(date.jour, date.mois, date.annee, biblio.tablivre[i].date.jour, 
                        biblio.tablivre[i].date.mois, biblio.tablivre[i].date.annee) = faux ou 
                            (ControleDate(date.jour, date.mois, date.annee, biblio.tabauteur[noauteur].mort.jour, 
                            biblio.tabauteur[noauteur].mort.mois, biblio.tabauteur[noauteur].mort.annee) = faux et
                                biblio.tabauteur[noauteur].mort.jour != 0)) alors
                            date_ok <- faux
                        finsi
                    finsi
                finfaire
                si (date_ok = faux) alors
                    MesgError(0004, biblio)
                    Afficher AffMesg(39, biblio), a la ligne
                sinon
                    biblio.tabauteur[noauteur].nais <- date
                    Afficher AffMesg(40, biblio), a la ligne
                finsi
            cas 5:
                Afficher MesgSaisie(59, biblio), a la ligne
                SaisirDate(biblio.tabauteur[noauteur].mort, biblio)
                date_ok <- vrai
                pour i de 0 a biblio.nblivre-1 faire
                    si (biblio.tablivre[i].auteur = biblio.tabauteur[noauteur].id_auteur) alors
                        si (ControleDate(biblio.tabauteur[noauteur].nais.jour, biblio.tabauteur[noauteur].nais.mois, 
                            biblio.tabauteur[noauteur].nais.annee, date.jour, date.mois, date.annee) == false) alors
                            date_ok <- false
                        finsi
                    finsi
                finfaire
                si (date_ok = faux) alors
                    MesgError(0003, biblio)
                    MesgNonValid(39, biblio)
                sinon
                    biblio.tabauteur[noauteur].mort <- date
                    MesgValid(40, biblio)
                finsi
            cas 6: rien
            defaut:
                si (Controle('|', choix, 1, 6)) alors
                    MesgError(0002, biblio)
                sinon
                    MesgError(0001, biblio)
                finsi
            finfaire
        tant que(choix != 6)
    finsi
Fin

procedure SupprimeAuteur(; biblio : t_biblio)
Debut
    avec 	reponse : caractere
    		position, i : entier

    position <- RechercheAuteur(biblio)
    si (position <= 0) alors
        si (position = 0) alors
            MesgError(1006, biblio)
        finsi
    sinon
        AfficheAuteur(biblio, position)
        faire
            SaisieCarac(reponse, MesgSaisie(60, biblio))
            si (reponse = AffChoix(1, biblio)) alors
                si (biblio.tabauteur[position].nblivres != 0) alors
                    Afficher AffMesg(61, biblio)
                    pour i de 0 a biblio.nblivre-1 faire
                        si (biblio.tablivre[i].auteur = biblio.tabauteur[position].id_auteur) alors
                            Afficher biblio.tablivre[i].titre
                            MesgValid(63, biblio)
                            biblio.tablivre[i] <- biblio.tablivre[biblio.nblivre]
                            biblio.nblivre <- biblio.nblivre - 1
                        finsi
                    finfaire
                finsi
                biblio.tabauteur[position] <- biblio.tabauteur[biblio.nbauteur]
                biblio.nbauteur <- biblio.nbauteur - 1
                Afficher AffMesg(47, biblio), a la ligne
            sinon
                si (reponse = AffChoix(2, biblio)) alors
                    Afficher AffMesg(48, biblio), a la ligne
                sinon
                    MesgError(0002, biblio)
                finsi
            finsi
        tant que(reponse != AffChoix(1, biblio) et reponse != AffChoix(2, biblio))
    finsi
Fin

procedure OpenFile(; biblio : t_biblio)
Debut
    avec 	i : entier
    		buffer_string : chaine
    		fic : fichier

    fic <- ouvrir("fichier.txt", lecture)
    lire(fic, buffer_string)
    si (buffer_string != "") alors
        biblio.id <- entier(buffer_string)
        lire(fic, buffer_string)
        biblio.nblivre <- entier(buffer_string)
        pour i de 1 a biblio.nblivre faire
            lire(fic, biblio.tablivre[i].titre)
            lire(fic, buffer_string)
            biblio.tablivre[i].auteur <- entier(buffer_string)
            lire(fic, buffer_string)
            biblio.tablivre[i].page <- entier(buffer_string)
            lire(fic, buffer_string)
            biblio.tablivre[i].date.jour <- entier(buffer_string)
            lire(fic, buffer_string)
            biblio.tablivre[i].date.mois <- entier(buffer_string)
            lire(fic, buffer_string)
            biblio.tablivre[i].date.annee <- entier(buffer_string)
        finfaire
        lire(fic, buffer_string)
        biblio.nbauteur <- entier(buffer_string)
        pour i de 1 a biblio.nbauteur faire
            lire(fic, biblio.tabauteur[i].prenom)
            lire(fic, biblio.tabauteur[i].nom)
            lire(fic, biblio.tabauteur[i].nationalite)
            lire(fic, buffer_string)
            biblio.tabauteur[i].id_auteur <- entier(buffer_string)
            lire(fic, buffer_string)
            biblio.tabauteur[i].nais.jour <- entier(buffer_string)
            lire(fic, buffer_string)
            biblio.tabauteur[i].nais.mois <- entier(buffer_string)
            lire(fic, buffer_string)
            biblio.tabauteur[i].nais.annee <- entier(buffer_string)
            lire(fic, buffer_string)
            biblio.tabauteur[i].mort.jour <- entier(buffer_string)
            lire(fic, buffer_string)
            biblio.tabauteur[i].mort.mois <- entier(buffer_string)
            lire(fic, buffer_string)
            biblio.tabauteur[i].mort.annee <- entier(buffer_string)
            lire(fic, buffer_string)
            biblio.tabauteur[i].nblivres <- entier(buffer_string)
        finfaire
    sinon
        biblio.id <- 0
        biblio.nbauteur <- 0
        biblio.nblivre <- 0
    finsi
    fermer (fic)
Fin

procedure CloseFile(; biblio : t_biblio)
Debut
    avec 	i : entier
    		fic : fichier

   	fic <- ouvrir("fichier.txt", ecriture)
    ecrire(fic, biblio.id)
    ecrire(fic, biblio.nblivre)
    pour i de 1 a biblio.nblivre faire
        ecrire(fic, (biblio.tablivre[i].titre))
        ecrire(fic, biblio.tablivre[i].auteur)
        ecrire(fic, biblio.tablivre[i].page)
        ecrire(fic, biblio.tablivre[i].date.jour)
        ecrire(fic, biblio.tablivre[i].date.mois)
        ecrire(fic, biblio.tablivre[i].date.annee)
    finfaire
    ecrire(fic, biblio.nbauteur)
    pour i de 1 a biblio.nbauteur faire
        ecrire(fic, (biblio.tabauteur[i].prenom))
        ecrire(fic, (biblio.tabauteur[i].nom))
        ecrire(fic, (biblio.tabauteur[i].nationalite))
        ecrire(fic, biblio.tabauteur[i].id_auteur)
        ecrire(fic, biblio.tabauteur[i].nais.jour)
        ecrire(fic, biblio.tabauteur[i].nais.mois)
        ecrire(fic, biblio.tabauteur[i].nais.annee)
        ecrire(fic, biblio.tabauteur[i].mort.jour)
        ecrire(fic, biblio.tabauteur[i].mort.mois)
        ecrire(fic, biblio.tabauteur[i].mort.annee)
        ecrire(fic, biblio.tabauteur[i].nblivres)
    finfaire
    fermer (fic)
Fin

procedure Langinit(choix : entier ; biblio : t_biblio)
Debut
    avec 	i, j : entier
    		buffer_string : chaine
    		ficfr : fichier //("fr_lang.txt")
    		ficen : fichier //("en_lang.txt")

    selon (choix) faire
    cas 1:
    	ficfr <- ouvrir("fr_lang.txt", lecture)
        lire(ficfr, buffer_string)
        biblio.lang.nberr <- entier(buffer_string)
        si (biblio.lang.nberr != 0) alors
            pour i de 1 a biblio.lang.nberr faire
                lire(ficfr, buffer_string)
                biblio.lang.erreur[i].noerr <- entier(buffer_string)
                lire(ficfr, biblio.lang.erreur[i].mesg)
            finfaire
        finsi
        lire(ficfr, buffer_string)
        biblio.lang.nbmesg <- entier(buffer_string)
        si (biblio.lang.nbmesg != 0) alors
            pour i de 1 a biblio.lang.mesg faire
                lire(ficfr, buffer_string)
                biblio.lang.mesg[i].nomesg <- entier(buffer_string)
                lire(ficfr, biblio.lang.mesg[i].mesg)
            finfaire
        finsi
        lire(ficfr, buffer_string)
        biblio.lang.nbmenu <- entier(buffer_string)
        si (biblio.lang.nbmenu != 0) finsi
            pour i de 1 a biblio.lang.nbmenu faire
                lire(ficfr, buffer_string)
                biblio.lang.menu[i].nomenu <- entier(buffer_string)
                lire(ficfr, buffer_string)
                biblio.lang.menu[i].size <- entier(buffer_string)
                pour j de 1 a biblio.lang.menu[i].size faire
                    lire(ficfr, biblio.lang.menu[i].menu[j])
                finfaire
            finfaire
        finsi
        lire(ficfr, buffer_string)
        biblio.lang.nbchoix <- entier(buffer_string)
        si (biblio.lang.nbchoix != 0) alors
            pour i de 1 a biblio.lang.nbchoix faire
                lire(ficfr, buffer_string)
                biblio.lang.choix[i].nochoix <- entier(buffer_string)
                lire(ficfr, buffer_string)
                biblio.lang.choix[i].choix <- buffer_string[0]
            finfaire
        finsi
        fermer(ficfr)
    cas 2:
        ficen <- ouvrir("fr_lang.txt", lecture)
        lire(ficen, buffer_string)
        biblio.lang.nberr <- entier(buffer_string)
        si (biblio.lang.nberr != 0) alors
            pour i de 1 a biblio.lang.nberr faire
                lire(ficen, buffer_string)
                biblio.lang.erreur[i].noerr <- entier(buffer_string)
                lire(ficen, biblio.lang.erreur[i].mesg)
            finfaire
        finsi
        lire(ficen, buffer_string)
        biblio.lang.nbmesg <- entier(buffer_string)
        si (biblio.lang.nbmesg != 0) alors
            pour i de 1 a biblio.lang.mesg faire
                lire(ficen, buffer_string)
                biblio.lang.mesg[i].nomesg <- entier(buffer_string)
                lire(ficen, biblio.lang.mesg[i].mesg)
            finfaire
        finsi
        lire(ficen, buffer_string)
        biblio.lang.nbmenu <- entier(buffer_string)
        si (biblio.lang.nbmenu != 0) finsi
            pour i de 1 a biblio.lang.nbmenu faire
                lire(ficen, buffer_string)
                biblio.lang.menu[i].nomenu <- entier(buffer_string)
                lire(ficen, buffer_string)
                biblio.lang.menu[i].size <- entier(buffer_string)
                pour j de 1 a biblio.lang.menu[i].size faire
                    lire(ficen, biblio.lang.menu[i].menu[j])
                finfaire
            finfaire
        finsi
        lire(ficen, buffer_string)
        biblio.lang.nbchoix <- entier(buffer_string)
        si (biblio.lang.nbchoix != 0) alors
            pour i de 1 a biblio.lang.nbchoix faire
                lire(ficen, buffer_string)
                biblio.lang.choix[i].nochoix <- entier(buffer_string)
                lire(ficen, buffer_string)
                biblio.lang.choix[i].choix <- buffer_string[0]
            finfaire
        finsi
        fermer(ficen)
    defaut : rien
    finfaire
Fin

procedure MesgError(noerr : entier ; biblio : t_biblio)
Debut
    avec chaine : chaine

    chaine <- "# " + AffErr(0000, biblio) + " # " + chaine(noerr) + " # " + AffErr(noerr, biblio) + "\n"
    Afficher chaine
Fin

procedure MesgValid(nomesg : entier ; biblio : t_biblio)
Debut
    avec chaine : chaine

    chaine <- AffMesg(nomesg, biblio) + "\n"
    Afficher chaine
Fin

procedure MesgNonValid(nomesg : entier ; biblio : t_biblio)
Debut
    avec chaine : chaine

    chaine <- AffMesg(nomesg, biblio) + "\n"
    Afficher chaine
Fin

fonction AffMenu(nomenu : entier ; biblio : t_biblio) retourne chaine
Debut
    avec 	chaine : chaine
    		i, j : entier

    i <- 0
    tant que(nomenu != biblio.lang.menu[i].nomenu) faire
        i = i + 1
    finfaire
    chaine <- biblio.lang.menu[i].menu[0]
    pour j de 1 a biblio.lang.menu[i].size-1 faire
        chaine = chaine + "\n"
        chaine = chaine + biblio.lang.menu[i].menu[j]
    finfaire
    retourne chaine
Fin

fonction MesgSaisie(nomesg : entier ; biblio : t_biblio) retourne chaine
Debut
    avec chaine : chaine

    chaine <- AffMesg(nomesg, biblio) + " : "
    retourne chaine
Fin

fonction AffMesg(nomesg : entier ; biblio : t_biblio) retourne chaine
Debut
    avec 	i : entier
    		mesg : chaine

    i <- 0
    tant que(nomesg != biblio.lang.mesg[i].nomesg) faire
        i = i + 1
    finfaire
    mesg <- biblio.lang.mesg[i].mesg
    retourne mesg
Fin

fonction AffError(noerr : entier ; biblio : t_biblio) retourne chaine
Debut
    avec 	i : entier
    		mesg : chaine

    i <- 0
    tant que(noerr != biblio.lang.erreur[i].noerr) faire
        i = i + 1
    finfaire
    mesg <- biblio.lang.erreur[i].mesg
    retourne mesg
Fin

fonction AffChoix(nochoix : entier ; biblio : t_biblio) retourne caractere
Debut
    avec 	i : entier
    		choix : caractere

    i <- 0
    tant que(nochoix != biblio.lang.choix[i].nochoix) faire
        i = i + 1
    finfaire
    choix <- biblio.lang.choix[i].choix
    retourne choix
Fin

procedure Menu(menu : chaine ; choix : entier, biblio : t_biblio)
Debut
    Afficher menu
    a la ligne, a la ligne
    SaisieEntier(choix, MesgSaisie(62, biblio))
Fin

procedure SaisirDate(t_date& date, t_biblio& biblio)
Debut
    SaisieEntier(date.jour, MesgSaisie(74, biblio))
    tant que(Controle('|', date.jour, 1, 31)) faire
        MesgError(5, biblio)
        MesgError(7, biblio)
        SaisieEntier(date.jour, MesgSaisie(72, biblio))
    finfaire
    SaisieEntier(date.mois, MesgSaisie(75, biblio))
    tant que(Controle('|', date.mois, 1, 12)) faire
        MesgError(5, biblio)
        MesgError(8, biblio)
        SaisieEntier(date.mois, MesgSaisie(73, biblio))
    finfaire
    SaisieEntier(date.annee, MesgSaisie(76, biblio))
    tant que(!DateValide(date.jour, date.mois, date.annee)) faire
        MesgError(9, biblio)
        SaisirDate(date, biblio)
    finfaire
Fin