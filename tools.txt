#include "tools.h"

procedure SaisieEntier(; text : chaine  entier : entier)
Debut
    Afficher text
    Saisir entier
Fin

procedure SaisieChaine(; text : chaine  machaine : chaine)
Debut
    Afficher text
    Saisir machaine
Fin

procedure SaisieCarac(; text : chaine  moncarac : chaine)
Debut
    Afficher text
    Saisir moncarac
Fin

fonction Controle(; controle_type : caractere, bornemin : entier, bornemax : entier  nombre : entier) renvoie booleen
Debut
    avec controle_ok : booleen
	
	controle_ok <- faux
    selon (controle_type) faire
    cas '>':
        //entrer une valeur hors de l'intervalle dans la borne non desirée
        si (nombre > bornemin) alors
            controle_ok <- vrai
        finsi
    cas '<':
        //entrer une valeur hors de l'intervalle dans la borne non desirée
        si (nombre < bornemax) alors
            controle_ok <- vrai
        finsi
    cas '=':
        //entrer une valeur hors de l'intervalle dans bornemax
        si (nombre = bornemin) alors
            controle_ok <- vrai
        finsi
    cas '&':
        si (nombre > bornemin et nombre < bornemax) alors
            controle_ok <- vrai
        finsi
    cas '|':
        si (nombre < bornemin ou nombre > bornemax) alors
            controle_ok <- vrai
        finsi
    defaut: rien
    finfaire
    retourne controle_ok
Fin

fonction DateValide(; jour : entier, mois : entier, annee : entier ;) retourne booleen
Debut
    avec	estBiss, 
			mois_ok, 
			jour_ok, 
			fevrier_ok, 
			date_ok : booleen

    estBiss <- (((annee mod 4 = 0) et (annee mod 100 != 0)) ou (annee mod 400 = 0))
    fevrier_ok <- (((estBiss = vrai) et jour <= 29) ou ((estBiss = faux) et jour <= 28))
    jour_ok <- (jour >= 1 et (((jour <= 31) et (mois != 4 et mois != 6 et mois != 9 et mois != 11 et mois != 2))
        ou ((jour <= 30) et (mois != 2))
        ou (jour <= 29 et fevrier_ok)
        ou (jour <= 28 et fevrier_ok = faux)))
    mois_ok <- ((mois <= 12 et mois >= 1))
    date_ok <- (jour_ok et mois_ok)
    retourne date_ok
Fin

fonction DateToString(; separateur : caractere, jour : entier, mois : entier, annee : entier) retourne chaine
Debut
    avec date : chaine

    date = chaine(jour) + separateur + chaine(mois) + separateur + chaine(annee)
    return date
Fin

fonction Majuscule(; nom : chaine) retourne chaine
Debut
    avec i, j : entier
	
	j <- nom.length()
    pour i de 0 a j faire
        si ((nom[i] >= 'a') et (nom[i] <= 'z')) alors
            nom[i] <- nom[i] - 'a' + 'A'
        finsi
    finfaire
    retourne nom
Fin

fonction Minuscule(; nom : chaine) retourne chaine
Debut
    avec i, j : entier
	
	j <- nom.length()
    pour i de 0 a j faire
        si ((nom[i] >= 'A') et (nom[i] <= 'Z')) alors
            nom[i] <- nom[i] - 'A' + 'a'
        finsi
    finfaire
    retourne nom
Fin

fonction ControleDate(; jour1 : entier, mois1 : entier, annee1 : entier, jour2 : entier, mois2 : entier, annee2 : entier) retourne booleen
Debut
    avec date_ok : booleen

    date_ok <- faux
    si (annee2 > annee1) alors
        date_ok <- vrai
    sinon
        si (annee2 = annee1 et mois2 > mois1) alors
            date_ok <- vrai
        sinon
            si (annee2 = annee1 et mois2 = mois1 et jour2 > jour1) alors
                date_ok <- vrai
            sinon
                si (annee2 = annee1 et mois2 = mois1 et jour2 = jour1) alors
                    date_ok <- vrai
                finsi
            finsi
        finsi
    finsi
    retourne date_ok
Fin

fonction RechercheExp(; cible : chaine, motif : chaine) retourne booleen
Debut
    regex pattern{motif}
    bool result <- regex_search(cible, pattern)
    retourne result
Fin